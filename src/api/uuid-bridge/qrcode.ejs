<html>
  <head>
    <title>QR Code Page</title>
  </head>
  <body>
    <div id="qrCodeContainer">
      <img src="<%= qrCode %>" alt="QR Code">
    </div>
  </body>
</html>
<script>
    const payload = JSON.stringify({ uid: '<%= uuid %>', url: '<%= urlToVerify %>', create: true });

    // TODO: switch to https using SSL crt
    const connection = new WebSocket('ws://localhost:8999');

    // pre-flight request for validating redirection URL ahead of time
    let verifiedRedirectURL = '';
    verifyUrl('<%= urlToVerify %>').then((response) => {
      verifiedRedirectURL = response?.urlToRedirect;
    });
  
    connection.addEventListener('message', function(event) {
      // Handle received messages here
      console.log('Client:: received message:', event.data);
      const uuid = '<%= uuid %>';
      const decodedMsg = JSON.parse(event.data);
      const decodedVerifiedURL = verifiedRedirectURL;

      // Match UUIDs client side and redirect
      if (decodedMsg.redirectUrl &&
          decodedVerifiedURL &&
          uuid === decodedMsg.uid) {
        window.location.href = decodedMsg.redirectUrl;
      }
      // UUIDs match but URL not verified
      else if (uuid === decodedMsg.uid && !decodedVerifiedURL) {
        const qrCodeContainer = document.getElementById('qrCodeContainer');
        if (qrCodeContainer) {
          qrCodeContainer.innerHTML = `
            <div id="warningContainer">
              <span id="warningIcon">&#9888;</span>
              <p id="warningMessage">The page could not be verified against Phishing</p>
            </div>
          `;
        }
      }
    });
  
    connection.addEventListener('open', function() {
      // Connection is open, you can send messages if needed
      console.log('Client:: WebSocket connection opened');
      connection.send(payload);
    });
  
    connection.addEventListener('close', function() {
      // Connection is closed
      console.log('Client:: WebSocket connection closed');
    });
  
    connection.addEventListener('error', function(error) {
      // Handle any errors that occur
      console.error('Client:: WebSocket error:', error);
    });

    async function verifyUrl(urlToVerify) {
        const verificationServerURL = '<%= PROXY_SERVER %>';
        const url = `${verificationServerURL}/verify?url=${encodeURIComponent(urlToVerify)}`;

        try {
            const response = await fetch(url);
            if (response.ok) {
              const data = await response.json();
              // Process the response data here
              return data;
            }
            if (response.status === 404) {
              console.warn(response.status, response.statusText);
            }
        } catch (error) {
          if (error.status !== 404)
            console.error('Error:', error);
        }
      return null;
    }
  </script>
  